---
layout: post-current
title: x86-64 Register
date: 2024-10-14 11:14:00 +0900
categories: security
---
예전에는 어떤 순서로 공부하면 좋을지 잘 몰랐는데<br>
요새는 좋은 공부 사이트들이 많아서 공부에 더 의욕이 생긴다!<br>
<br>
<div class="post-chapter">0. 개요</div><br>
x86-64 CPU 아키텍쳐의 레지스터에 대해 정리한 내용이다.<br>
<br>
<div class="post-chapter">1. 레지스터</div><br>
* 레지스터는 프로세서 내에서 자료를 보관하는 기억 장소이다.<br>
* 현재 계산 수행중인 값을 저장하는 데 사용된다.<br>
* 범용 레지스터, 인덱스 레지스터, 포인터 레지스터, 세그먼트 레지스터, 플래그 레지스터 등으로 분류할 수 있다.<br>
<br>
<div class="post-chapter">2. 범용 레지스터</div><br>
* 범용 레지스터는 다목적 레지스터로, 관례적으로 사용되는 용도는 있으나 개발자의 의도나 규약(시스템 콜 등)에 따라 다르게 사용할 수 있다.<br>
<table class="post-table">
    <tbody>
        <tr>
            <th>이름</th>
            <th>의미</th>
            <th>용도</th>
            <th>비고</th>
        </tr>
        <tr>
            <td>EAX</td>
            <td>Accumulator Register</td>
            <td>산술,논리 연산을 담당하는 레지스터로, 함수의 반환값을 저장한다.</td>
            <td>RAX(64bit): 확장된 EAX로, 64bit 아키텍처에서 사용된다.</br>EAX(32bit): 32bit 아키텍처에서 사용된다.</br>AX(16bit): EAX의 하위 16bit를 가리킨다.</br>AH(8bit): AX의 상위(High) 8bit를 가리킨다.</br>AL(8bit): AX의 하위(Low) 8bit를 가리킨다.</td>
        </tr>
        <tr>
            <td>EBX</td>
            <td>Base Register</td>
            <td>메모리 주소 저장 또는 배열 접근을 위한 기준 포인터로 사용된다.</td>
            <td>RBX(64bit): 확장된 EBX로, 64bit 아키텍처에서 사용된다.</br>EBX(32bit): 32bit 아키텍처에서 사용된다.</br>BX(16bit): EBX의 하위 16bit를 가리킨다.</br>BH(8bit): BX의 상위(High) 8bit를 가리킨다.</br>BL(8bit): BX의 하위(Low) 8bit를 가리킨다.</td>
        </tr>
        <tr>
            <td>ECX</td>
            <td>Count Register</td>
            <td>반복 작업에서 카운트 역할을 위해 사용된다.</td>
            <td>RCX(64bit): 확장된 ECX로, 64bit 아키텍처에서 사용된다.</br>ECX(32bit): 32bit 아키텍처에서 사용된다.</br>CX(16bit): ECX의 하위 16bit를 가리킨다.</br>CH(8bit): CX의 상위(High) 8bit를 가리킨다.</br>CL(8bit): CX의 하위(Low) 8bit를 가리킨다.</td>
        </tr>
        <tr>
            <td>EDX</td>
            <td>Data Register</td>
            <td>큰 수를 연산할때 사용된다. </td>
            <td>RDX(64bit): 확장된 EDX로, 64bit 아키텍처에서 사용된다.</br>EDX(32bit): 32bit 아키텍처에서 사용된다.</br>DX(16bit): EDX의 하위 16bit를 가리킨다.</br>DH(8bit): DX의 상위(High) 8bit를 가리킨다.</br>DL(8bit): DX의 하위(Low) 8bit를 가리킨다.</td>
        </tr>
    </tbody>
</table><br>
<br>
<div class="post-chapter">3. 인덱스 레지스터</div><br>
* 인덱스 레지스터는 메모리의 데이터 접근 및 조작을 위한 레지스터이다.<br>
<table class="post-table">
    <tbody>
        <tr>
            <th>이름</th>
            <th>의미</th>
            <th>용도</th>
            <th>비고</th>
        </tr>
        <tr>
            <td>ESI</td>
            <td>Source Index</td>
            <td>데이터 복사, 문자열 연산, 입출력 등 작업에서 소스 데이터의 주소를 가리키는 데 사용된다. </td>
            <td>RSI(64bit): 확장된 ESI로, 64bit 아키텍처에서 사용된다.</br>ESI(32bit): 32bit 아키텍처에서 사용된다.</br>SI(16bit): ESI의 하위 16bit를 가리킨다.</td>
        </tr>
        <tr>
            <td>EDI</td>
            <td>Destination Index</td>
            <td>데이터 복사, 문자열 연산, 입출력 등 작업에서 목적지 데이터의 주소를 가리키는 데 사용된다.</td>
            <td>RDI(64bit): 확장된 EDI로, 64bit 아키텍처에서 사용된다.</br>EDI(32bit): 32bit 아키텍처에서 사용된다.</br>DI(16bit): EDI의 하위 16bit를 가리킨다.</td>
        </tr>
    </tbody>
</table><br>
<br>
<div class="post-chapter">4. 포인터 레지스터</div><br>
* 포인터 레지스터는 스택 및 프로그램의 실행 흐름 관리를 위한 레지스터로, 메모리 주소를 저장한다.<br>
<table class="post-table">
    <tbody>
        <tr>
            <th>이름</th>
            <th>의미</th>
            <th>용도</th>
            <th>비고</th>
        </tr>
        <tr>
            <td>ESP</td>
            <td>Stack Pointer</td>
            <td>현재 스택의 최상단 주소를 저장하는 데 사용된다.</td>
            <td>RSP(64bit): 확장된 ESP로, 64bit 아키텍처에서 사용된다.</br>ESP(32bit): 32bit 아키텍처에서 사용된다.</br>SP(16bit): ESP의 하위 16bit를 가리킨다.</td>
        </tr>
        <tr>
            <td>EBP</td>
            <td>Base Pointer</td>
            <td>현재 스택의 하단 주소를 저장하는 데 사용된다.</td>
            <td>RBP(64bit): 확장된 EBP로, 64bit 아키텍처에서 사용된다.</br>EBP(32bit): 32bit 아키텍처에서 사용된다.</br>BP(16bit): ESP의 하위 16bit를 가리킨다.</td>
        </tr>
        <tr>
            <td>EIP</td>
            <td>Instruction Pointer</td>
            <td>다음에 실행할 명령의 메모리 주소를 저장하는 데 사용된다.</td>
            <td>RIP(64bit): 확장된 EIP로, 64bit 아키텍처에서 사용된다.</br>EIP(32bit): 32bit 아키텍처에서 사용된다.</td>
        </tr>
    </tbody>
</table><br>
<br>
<div class="post-chapter">5. 세그먼트 레지스터</div><br>
* 메모리의 각 세그먼트에 대한 기준 주소를 저장하기 위한 레지스터이다.<br>
<table class="post-table">
    <tbody>
        <tr>
            <th>이름</th>
            <th>의미</th>
            <th>용도</th>
        </tr>
        <tr>
            <td>CS</td>
            <td>Code Segment</td>
            <td>코드 세그먼트의 주소를 저장하는 데 사용된다.</td>
        </tr>
        <tr>
            <td>DS</td>
            <td>Data Segment</td>
            <td>데이터 세그먼트의 주소를 저장하는 데 사용된다.</td>
        </tr>
        <tr>
            <td>SS</td>
            <td>Stack Segment</td>
            <td>스택 세그먼트의 주소를 저장하는 데 사용된다.</td>
        </tr>
        <tr>
            <td>ES</td>
            <td></td>
            <td>추가적인 데이터 세그먼트 레지스터로 EDI 레지스터와 함께 문자열 연산에서 사용된다. </td>
        </tr>
        <tr>
            <td>FS</td>
            <td></td>
            <td>여분의 데이터 세그먼트 레지스터이다.</td>
        </tr>
        <tr>
            <td>GS</td>
            <td></td>
            <td>여분의 데이터 세그먼트 레지스터이다.</td>
        </tr>
    </tbody>
</table><br>
<br>
<div class="post-chapter">6. 플래그 레지스터</div><br>
* 각 비트가 연산의 결과를 나타내는 플래그로 사용되는 레지스터이다. 상태 플래그, 컨트롤 플래그 등으로 분류된다.<br>
<table class="post-table">
    <tbody>
        <tr>
            <th>분류</th>
            <th>이름</th>
            <th>의미</th>
            <th>용도</th>
        </tr>
        <tr>
            <td>상태 플래그</td>
            <td>ZF</td>
            <td>Zero Flag</td>
            <td>연산 결과가 0일 경우 1로 설정된다. </br>(*JZ 또는 JNZ 명령어에서 사용)</td>
        </tr>
        <tr>
            <td>상태 플래그</td>
            <td>SF</td>
            <td>Sign Flag</td>
            <td>연산 결과가 음수일 경우 1로 설정된다.</td>
        </tr>
        <tr>
            <td>상태 플래그</td>
            <td>CF</td>
            <td>Carry Flag</td>
            <td>부호 없는 수의 오버플로우가 발생한 경우 1로 설정된다.</td>
        </tr>
        <tr>
            <td>상태 플래그</td>
            <td>OF</td>
            <td>Overflow Flag</td>
            <td>부호 있는 수의 오버플로우가 발생한 경우 1로 설정된다.</td>
        </tr>
        <tr>
            <td>상태 플래그</td>
            <td>PF</td>
            <td>Parity Flag</td>
            <td>연산 결과에 1인 bit가 짝수개이면 1로 설정된다.</td>
        </tr>
        <tr>
            <td>상태 플래그</td>
            <td>AF</td>
            <td>Auxiliary Flag</td>
            <td>연산 결과 하위 4bit에 부호 없는 오버플로우가 발생한 경우 1로 설정된다.</td>
        </tr>
        <tr>
            <td>컨트롤 플래그</td>
            <td>TF</td>
            <td>Trap Flag</td>
            <td>1로 설정하면 디버거의 attach가 가능한 상태가 된다.</td>
        </tr>
        <tr>
            <td>컨트롤 플래그</td>
            <td>IF</td>
            <td>Interrupt Flag</td>
            <td>1로 설정하면 외부 인터럽트 요구를 무시한다.</td>
        </tr>
        <tr>
            <td>컨트롤 플래그</td>
            <td>DF</td>
            <td>Direction Flag</td>
            <td>문자열 등 작업에서 처리 방향을 제어하기 위해 사용된다.</td>
        </tr>
    </tbody>
</table><br>
<br>
<div class="post-chapter">출처</div><br>
<span class="post-overegg" style="color: blue; border: 0;">
    https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C_%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0
</span><br>
<span class="post-overegg" style="color: blue; border: 0;">
    https://haekt-log.tistory.com/93
</span><br>